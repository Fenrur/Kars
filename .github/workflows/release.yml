name: Release

on: push

jobs:
  semantic-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v4
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: New Release Published
      if: steps.semantic.outputs.new_release_published == 'true'
      run: |
        echo "New release published"
        echo ${{ steps.semantic.outputs.new_release_version }}

    - name: Last Release Version
      if: steps.semantic.outputs.new_release_published == 'false'
      run: |
        echo "No new release published"
        echo ${{ steps.semantic.outputs.last_release_version }}

    - name: Save New Release Version to File
      if: steps.semantic.outputs.new_release_published == 'true'
      run: echo "${{ steps.semantic.outputs.new_release_version }}" > new_release_version.txt

    - name: Save New Release Published Status to File
      run: echo "${{ steps.semantic.outputs.new_release_published }}" > new_release_published.txt

    - name: Upload Release Information as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-info
        path: |
          new_release_version.txt
          new_release_published.txt
            
  build-and-push-images:
    runs-on: ubuntu-latest
    needs: semantic-release
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Read branch name
      id: version
      run: |
        echo "BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9]/-/g')" >> $GITHUB_ENV
        echo "Branch Name: $BRANCH_NAME"
        
    - name: Download Release Information
      uses: actions/download-artifact@v4
      with:
        name: release-info
        
    - name: Read New Release Version from File
      id: read-version
      run: echo "NEW_RELEASE_VERSION=$(cat new_release_version.txt)" >> $GITHUB_ENV

    - name: Read New Release Published Status from File
      id: read-published
      run: echo "NEW_RELEASE_PUBLISHED=$(cat new_release_published.txt)" >> $GITHUB_ENV

    - name: Change project version if new release
      run: |
        if [ "${{ env.NEW_RELEASE_PUBLISHED }}" == 'true' ]; then
         if [ "${{ env.BRANCH_NAME }}" == 'main' ]; then
           echo "PROJECT_VERSION=${{ env.NEW_RELEASE_VERSION }}" >> $GITHUB_ENV
         else
           echo "PROJECT_VERSION=${{ env.NEW_RELEASE_VERSION }}-${{ env.BRANCH_NAME }}" >> $GITHUB_ENV
         fi
        else
          ACTUAL_VERSION=$(cat ./VERSION)
            if [ "${{ env.BRANCH_NAME }}" == 'main' ]; then
              echo "PROJECT_VERSION=${ACTUAL_VERSION}" >> $GITHUB_ENV
            else
              echo "PROJECT_VERSION=${ACTUAL_VERSION}-${{ env.BRANCH_NAME }}" >> $GITHUB_ENV
            fi
        fi

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: fenrur
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 21
        cache: gradle

    - name: Generate Jooq
      working-directory: ./template-backend
      run: ./gradlew jooqCodegen
    
    - name: Backend - Build Docker Image & Push to GitHub Container Registry
      working-directory: ./template-backend
      env:
        QUARKUS_CONTAINER_IMAGE_BUILD: true
        QUARKUS_CONTAINER_IMAGE_PUSH: true
      run: ./gradlew build

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: lts/iron
        cache: 'npm'
        cache-dependency-path: ./template-frontend/package-lock.json
        
    - name: Restore cache next build
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ${{ github.ref }}
          ${{ github.workspace }}/template-frontend/.next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

    - name: Change Frontend package.json version
      working-directory: ./template-frontend
      run: |
        sed -i "s/\"version\": \".*\"/\"version\": \"${{ env.NEW_RELEASE_VERSION }}\"/g" package.json
          
    - name: Install dependencies Frontend
      working-directory: ./template-frontend
      run: npm install

    - name: Build Frontend
      working-directory: ./template-frontend
      run: npm run build

    - name: Build Docker image
      uses: mamezou-tech/buildpacks-action@v0.7.0
      with:
        image: ghcr.io/fenrur/template/template-frontend
        tag: ${{ env.PROJECT_VERSION }}
        builder: paketobuildpacks/builder-jammy-base
        buildpacks: paketo-buildpacks/nodejs
        env: 'BP_NODE_VERSION=v22.11.0 NODE_ENV=production'
        path: './template-frontend'

    - name: Push to GitHub Container Registry
      run: docker push ghcr.io/fenrur/template/template-frontend:${{ env.PROJECT_VERSION }}